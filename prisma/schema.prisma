// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../lib/generated/prisma-client"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Better Auth models
model User {
  id             Int       @id @default(autoincrement())
  name           String?
  email          String    @unique
  emailVerified  Boolean   @default(false)
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Profile fields
  avatar         String?   @db.VarChar(256)
  bannerImage    String?   @db.VarChar(256)
  displayName    String?   @db.VarChar(256)
  bio            String?   @db.Text
  socialLinks    Json?
  followerCount  Int       @default(0)
  followingCount Int       @default(0)

  // Personal information
  birthdate      DateTime?
  city           String?   @db.VarChar(100)
  state          String?   @db.VarChar(100)
  country        String?   @db.VarChar(100)
  school         String?   @db.VarChar(256)
  gender         String?   @db.VarChar(20)

  // Relations
  accounts       Account[]
  sessions       Session[]
  ownedEntities  Entity[]     @relation("EntityOwner")
  follows        Follow[]
  userClips      UserClip[]

  // Discussion system
  discussionTopics     DiscussionTopic[]
  discussionComments   DiscussionComment[]   @relation("AuthoredComments")
  commentMentions      DiscussionComment[]   @relation("CommentMentions")
  discussionLikes      DiscussionLike[]

  @@map("Users")
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("Sessions")
}

model Account {
  id                     Int       @id @default(autoincrement())
  userId                 Int
  accountId              String
  providerId             String
  accessToken            String?   @db.Text
  refreshToken           String?   @db.Text
  idToken                String?   @db.Text
  accessTokenExpiresAt   DateTime?
  refreshTokenExpiresAt  DateTime?
  scope                  String?
  password               String?   @db.Text
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@index([userId])
  @@map("Accounts")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@map("Verifications")
}

// Unified Entity System
model Entity {
  id             Int      @id @default(autoincrement())
  type           String   @db.VarChar(50) // 'sport', 'league', 'team', 'player'
  slug           String   @unique
  name           String   @db.VarChar(256)
  description    String?  @db.Text
  logo           String?  @db.Text
  banner         String?  @db.Text
  gender         String?  @db.VarChar(20) // 'MENS', 'WOMENS', 'COED' - for leagues/teams (single value)

  // Hierarchical structure
  parentId       Int?
  parent         Entity?  @relation("EntityHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children       Entity[] @relation("EntityHierarchy")
  childEntities  String?  @db.VarChar(100) // e.g., "Leagues", "Teams", "Players" - used for UI labels

  // Ownership & Moderation
  ownerId        Int?
  owner          User?    @relation("EntityOwner", fields: [ownerId], references: [id], onDelete: SetNull)
  modsJson       Json?    // Array of { userId: number, permissions: string[] }

  // Social
  followerCount    Int      @default(0)
  clipsCount       Int      @default(0)
  discussionCount  Int      @default(0)  // Count of discussion topics about this entity
  commentCount     Int      @default(0)  // Count of all comments on this entity's discussions

  // Type-specific data stored as JSON
  metadata       Json?    // Flexible field for type-specific data

  // Page layout configuration
  layout         Json?    // Page layout: { l: [], c: [...widgets], r: [...widgets], x: [{title, content}] }

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  follows        Follow[]
  clips          EntityClip[]
  discussionTopics DiscussionTopicEntity[] @relation("DiscussionTopics")

  // Team memberships (for players)
  playerMemberships  TeamMembership[] @relation("PlayerMemberships")
  teamMembers        TeamMembership[] @relation("TeamMembers")

  // Stats system
  statsTemplatesForSport  StatsTemplate[] @relation("SportTemplates")
  statsTemplatesForLeague StatsTemplate[] @relation("LeagueTemplates")
  entityStats             EntityStats[]   @relation("EntityStats")
  statsAsParent           EntityStats[]   @relation("StatsParent")

  @@index([type])
  @@index([parentId])
  @@index([ownerId])
  @@map("Entities")
}

// Unified Follow System
model Follow {
  id         Int      @id @default(autoincrement())
  userId     Int
  entityId   Int
  followedAt DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  entity     Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@unique([userId, entityId])
  @@index([userId])
  @@index([entityId])
  @@map("Follows")
}

// Clips
model Clip {
  id          Int       @id @default(autoincrement())
  url         String    @db.VarChar(512)
  title       String    @db.VarChar(256)
  description String?   @db.Text
  thumbnail   String?   @db.VarChar(512)
  platform    String?   @db.VarChar(50) // e.g., "youtube", "vimeo"
  recordedAt  DateTime? // When the clip was actually recorded/filmed (optional, falls back to createdAt)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userClips   UserClip[]
  entityClips EntityClip[]

  @@map("Clips")
}

model UserClip {
  id        Int      @id @default(autoincrement())
  userId    Int
  clipId    Int
  order     Int      @default(0)
  addedAt   DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  clip      Clip     @relation(fields: [clipId], references: [id], onDelete: Cascade)

  @@map("UserClips")
}

model EntityClip {
  id        Int      @id @default(autoincrement())
  entityId  Int
  clipId    Int
  order     Int      @default(0)
  addedAt   DateTime @default(now())

  entity    Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  clip      Clip     @relation(fields: [clipId], references: [id], onDelete: Cascade)

  @@unique([entityId, clipId])
  @@map("EntityClips")
}

// Team Membership - tracks player-team relationships over time
model TeamMembership {
  id           Int       @id @default(autoincrement())
  playerId     Int
  teamId       Int
  jerseyNumber Int?
  positions    Json?     // Array of positions (e.g., ["Catcher", "Pitcher"])
  season       String?   @db.VarChar(50) // e.g., "2024", "2024-2025", "Fall 2024"
  startDate    DateTime?
  endDate      DateTime?
  isCurrent    Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  player       Entity    @relation("PlayerMemberships", fields: [playerId], references: [id], onDelete: Cascade)
  team         Entity    @relation("TeamMembers", fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([playerId, teamId, season])
  @@index([playerId])
  @@index([teamId])
  @@index([isCurrent])
  @@map("TeamMemberships")
}

// Stats Template - defines structure for different stat types
model StatsTemplate {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(256) // "Baseball Player Batting", "Basketball Team Season"
  entityType   String   @db.VarChar(50)  // "player", "team", "league" - what entity type this template is for
  sportId      Int      // Links to sport entity
  leagueId     Int?     // Optional - for league-specific customizations
  schema       Json     // Defines the stats fields, types, labels, validation, etc.
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  sport        Entity       @relation("SportTemplates", fields: [sportId], references: [id], onDelete: Cascade)
  league       Entity?      @relation("LeagueTemplates", fields: [leagueId], references: [id], onDelete: Cascade)
  entityStats  EntityStats[]

  @@index([sportId])
  @@index([leagueId])
  @@index([entityType])
  @@map("StatsTemplates")
}

// Entity Stats - stats for any entity (player, team, league, etc.)
model EntityStats {
  id          Int      @id @default(autoincrement())
  entityId    Int      // The entity these stats belong to (player, team, etc.)
  parentId    Int?     // Optional parent entity (e.g., which team for player, which league for team)
  season      String   @db.VarChar(50) // "2024", "2024-2025", "career"
  statsType   String   @db.VarChar(50) // "normalized", "custom"
  templateId  Int?     // Links to StatsTemplate if normalized
  stats       Json     // The actual stats data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  entity      Entity          @relation("EntityStats", fields: [entityId], references: [id], onDelete: Cascade)
  parent      Entity?         @relation("StatsParent", fields: [parentId], references: [id], onDelete: SetNull)
  template    StatsTemplate?  @relation(fields: [templateId], references: [id], onDelete: SetNull)

  @@unique([entityId, season, parentId, statsType, templateId])
  @@index([entityId])
  @@index([season])
  @@index([templateId])
  @@index([parentId])
  @@map("EntityStats")
}

// Discussion System

// Discussion Category/Tags
model DiscussionCategory {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)  // "General", "News", "Game Discussion", etc.
  slug        String    @unique
  description String?   @db.Text
  color       String?   @db.VarChar(20)   // Hex color for UI
  icon        String?   @db.VarChar(50)   // Icon name
  order       Int       @default(0)       // Display order
  createdAt   DateTime  @default(now())

  topics      DiscussionTopic[]

  @@map("DiscussionCategories")
}

// Discussion Topic (the main thread)
model DiscussionTopic {
  id                Int       @id @default(autoincrement())
  title             String    @db.VarChar(256)
  content           String    @db.Text
  authorId          Int
  categoryId        Int?

  // Polymorphic relationship - what this topic is about
  subjectType       String    @db.VarChar(50)  // "entity", "clip", "post", etc.
  subjectId         Int       // ID of the subject

  // Engagement metrics
  viewCount         Int       @default(0)
  commentCount      Int       @default(0)
  likeCount         Int       @default(0)

  // Bubbling behavior - whether this topic should appear on parent entities
  bubbleUp          Boolean   @default(true)

  // Moderation
  isPinned          Boolean   @default(false)
  isLocked          Boolean   @default(false)
  isDeleted         Boolean   @default(false)

  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastCommentAt     DateTime  @default(now())  // Updated only when TOP-LEVEL comment is added

  author            User                @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category          DiscussionCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  likes             DiscussionLike[]
  entities          DiscussionTopicEntity[]  // Many-to-many with entities

  @@index([subjectType, subjectId])
  @@index([categoryId])
  @@index([authorId])
  @@index([isPinned, lastCommentAt])  // For sorting: pinned first, then by recent top-level activity
  @@index([isDeleted])
  @@map("DiscussionTopics")
}

// Comments - can be attached to Topics, Clips, Posts, with limited nesting (1 level)
model DiscussionComment {
  id                Int       @id @default(autoincrement())
  authorId          Int
  content           String    @db.Text

  // Polymorphic parent - what this comment is attached to
  parentType        String    @db.VarChar(50)  // "topic", "clip", "post"
  parentId          Int       // ID of the parent (topic, clip, post)

  // Limited nesting (1 level only)
  replyToCommentId  Int?      // Direct parent comment (if this is a reply)
  replyToUserId     Int?      // The user being replied to (for @mentions)

  // Engagement
  likeCount         Int       @default(0)
  replyCount        Int       @default(0)  // Count of direct replies

  // Moderation
  isDeleted         Boolean   @default(false)
  isEdited          Boolean   @default(false)

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  author            User                @relation("AuthoredComments", fields: [authorId], references: [id], onDelete: Cascade)
  replyToComment    DiscussionComment?  @relation("CommentReplies", fields: [replyToCommentId], references: [id], onDelete: Cascade)
  replies           DiscussionComment[] @relation("CommentReplies")
  replyToUser       User?               @relation("CommentMentions", fields: [replyToUserId], references: [id], onDelete: SetNull)
  likes             DiscussionLike[]

  @@index([parentType, parentId, replyToCommentId])
  @@index([authorId])
  @@index([createdAt])
  @@map("DiscussionComments")
}

// Likes for topics and comments
model DiscussionLike {
  id          Int       @id @default(autoincrement())
  userId      Int

  // Polymorphic - can like topics or comments
  likeableType String   @db.VarChar(50)  // "topic" or "comment"
  likeableId   Int      // ID of topic or comment

  // For direct relations (helps with queries)
  topicId      Int?
  commentId    Int?

  createdAt    DateTime @default(now())

  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic        DiscussionTopic?    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  comment      DiscussionComment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, likeableType, likeableId])
  @@index([userId])
  @@index([likeableType, likeableId])
  @@map("DiscussionLikes")
}

// Join table for topics appearing on multiple entities (bubbling)
model DiscussionTopicEntity {
  id        Int             @id @default(autoincrement())
  topicId   Int
  entityId  Int
  createdAt DateTime        @default(now())

  topic     DiscussionTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  entity    Entity          @relation("DiscussionTopics", fields: [entityId], references: [id], onDelete: Cascade)

  @@unique([topicId, entityId])
  @@index([entityId])
  @@index([topicId])
  @@map("DiscussionTopicEntities")
}
