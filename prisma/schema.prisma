// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../lib/generated/prisma-client"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Better Auth models
model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  Boolean   @default(false)
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Profile fields
  avatar         String?   @db.VarChar(256)
  bannerImage    String?   @db.VarChar(256)
  displayName    String?   @db.VarChar(256)
  bio            String?   @db.Text
  socialLinks    Json?
  followerCount  Int       @default(0)
  followingCount Int       @default(0)

  // Personal information
  birthdate      DateTime?
  city           String?   @db.VarChar(100)
  state          String?   @db.VarChar(100)
  country        String?   @db.VarChar(100)
  school         String?   @db.VarChar(256)
  gender         String?   @db.VarChar(20)

  // Relations
  accounts       Account[]
  sessions       Session[]
  ownedEntities  Entity[]     @relation("EntityOwner")
  follows        Follow[]
  userClips      UserClip[]

  @@map("Users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("Sessions")
}

model Account {
  id                     String    @id @default(cuid())
  userId                 String
  accountId              String
  providerId             String
  accessToken            String?   @db.Text
  refreshToken           String?   @db.Text
  idToken                String?   @db.Text
  accessTokenExpiresAt   DateTime?
  refreshTokenExpiresAt  DateTime?
  scope                  String?
  password               String?   @db.Text
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@index([userId])
  @@map("Accounts")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@map("Verifications")
}

// Unified Entity System
model Entity {
  id             Int      @id @default(autoincrement())
  type           String   @db.VarChar(50) // 'sport', 'league', 'team', 'player'
  slug           String   @unique
  name           String   @db.VarChar(256)
  description    String?  @db.Text
  logo           String?  @db.Text
  banner         String?  @db.Text
  gender         String?  @db.VarChar(20) // 'MENS', 'WOMENS', 'COED' - for leagues/teams (single value)

  // Hierarchical structure
  parentId       Int?
  parent         Entity?  @relation("EntityHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children       Entity[] @relation("EntityHierarchy")
  childEntities  String?  @db.VarChar(100) // e.g., "Leagues", "Teams", "Players" - used for UI labels

  // Ownership & Moderation
  ownerId        String?
  owner          User?    @relation("EntityOwner", fields: [ownerId], references: [id], onDelete: SetNull)
  modsJson       Json?    // Array of { userId: number, permissions: string[] }

  // Social
  followerCount  Int      @default(0)
  clipsCount     Int      @default(0)

  // Type-specific data stored as JSON
  metadata       Json?    // Flexible field for type-specific data

  // Page layout configuration
  layout         Json?    // Page layout: { l: [], c: [...widgets], r: [...widgets], x: [{title, content}] }

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  follows        Follow[]
  clips          EntityClip[]

  // Team memberships (for players)
  playerMemberships  TeamMembership[] @relation("PlayerMemberships")
  teamMembers        TeamMembership[] @relation("TeamMembers")

  @@index([type])
  @@index([parentId])
  @@index([ownerId])
  @@map("Entities")
}

// Unified Follow System
model Follow {
  id         Int      @id @default(autoincrement())
  userId     String
  entityId   Int
  followedAt DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  entity     Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@unique([userId, entityId])
  @@index([userId])
  @@index([entityId])
  @@map("Follows")
}

// Clips
model Clip {
  id          Int       @id @default(autoincrement())
  url         String    @db.VarChar(512)
  title       String    @db.VarChar(256)
  description String?   @db.Text
  thumbnail   String?   @db.VarChar(512)
  platform    String?   @db.VarChar(50) // e.g., "youtube", "vimeo"
  recordedAt  DateTime? // When the clip was actually recorded/filmed (optional, falls back to createdAt)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userClips   UserClip[]
  entityClips EntityClip[]

  @@map("Clips")
}

model UserClip {
  id        Int      @id @default(autoincrement())
  userId    String
  clipId    Int
  order     Int      @default(0)
  addedAt   DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  clip      Clip     @relation(fields: [clipId], references: [id], onDelete: Cascade)

  @@map("UserClips")
}

model EntityClip {
  id        Int      @id @default(autoincrement())
  entityId  Int
  clipId    Int
  order     Int      @default(0)
  addedAt   DateTime @default(now())

  entity    Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  clip      Clip     @relation(fields: [clipId], references: [id], onDelete: Cascade)

  @@unique([entityId, clipId])
  @@map("EntityClips")
}

// Team Membership - tracks player-team relationships over time
model TeamMembership {
  id           Int       @id @default(autoincrement())
  playerId     Int
  teamId       Int
  jerseyNumber Int?
  positions    Json?     // Array of positions (e.g., ["Catcher", "Pitcher"])
  season       String?   @db.VarChar(50) // e.g., "2024", "2024-2025", "Fall 2024"
  startDate    DateTime?
  endDate      DateTime?
  isCurrent    Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  player       Entity    @relation("PlayerMemberships", fields: [playerId], references: [id], onDelete: Cascade)
  team         Entity    @relation("TeamMembers", fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([playerId, teamId, season])
  @@index([playerId])
  @@index([teamId])
  @@index([isCurrent])
  @@map("TeamMemberships")
}
